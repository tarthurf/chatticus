{"version":3,"sources":["utils/useForm.js","components/Navbar.js","components/Username.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["UseForm","initialValues","callback","useState","values","setValues","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","Navbar","props","socket","chatState","navState","setNavState","rooms","setRooms","newRoom","setNewRoom","Room","setRoom","ref","useOnclickOutside","useEffect","on","data","room","className","onClick","icon","faBars","Fragment","rotation","map","i","key","obj","emit","onSubmit","e","type","placeholder","maxLength","required","onChange","window","location","reload","faDoorOpen","Username","username","submit","htmlFor","io","Home","usernameState","setUsernameState","setChatState","messages","setMessages","message","messagesEndRef","useRef","concat","current","scrollIntoView","behavior","color","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.66ee9e0a.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst UseForm = (initialValues, callback) => {\n\n  const [values, setValues] = useState(initialValues);\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n      callback()\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value}));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    setValues,\n    values\n  }\n};\n\nexport default UseForm;","import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars} from '@fortawesome/free-solid-svg-icons';\nimport { faDoorOpen } from '@fortawesome/free-solid-svg-icons';\nimport useOnclickOutside from \"react-cool-onclickoutside\";\n\nconst Navbar = (props) => {\n\n  // setting up props from Home.js\n  const socket = props.socket;\n  const chatState = props.chatState;\n\n  // state for room menus, to open and close\n  const [navState, setNavState] = useState(false);\n  // State for all current active rooms\n  const [rooms, setRooms] = useState(['General', 'Work', 'Random']);\n  // state for creating new room\n  const [newRoom, setNewRoom] = useState(\"\");\n  // State for displaying current room\n  const [Room, setRoom] = useState(\"\");\n\n  // Sets user to selected room room\n  const joinRoom = (obj) => {\n    socket.emit('switchRoom', obj);\n    setNavState(false);\n  }\n\n  // Sets up new user created rooms\n  const createRoom = e => {\n    e.preventDefault();\n    socket.emit('createRoom', newRoom);\n    setNewRoom(\"\");\n  }\n\n  // Handles the user disconnecting\n  const disconnect = () => {\n    socket.emit('disconnect');\n    window.location.reload(false);\n  }\n\n  // Close nav menu when user clicks outside of it\n  const ref = useOnclickOutside(() => {\n    setNavState(false);\n  });\n\n  // Handles user swithcing rooms and recieves server messages as well as broadcasts room change to relavant users\n  useEffect(() => {\n    socket.on('updateRoom', data => {\n      setRooms(data.rooms);\n      if(!data.room) return;\n      else setRoom(data.room);\n    });\n  }, [socket])\n\n  return (\n    <nav className=\"px-4 flex items-center flex-grow-0 flex-shrink-0 justify-between h-16 w-full bg-custom-blue text-custom-gold text-3xl md:text-4xl shadow-lg\">\n    {navState === false ?\n      chatState === true ?\n        <button className=\"text-xl md:text-2xl\"\n          onClick={() => setNavState(!navState)}\n        >\n          <FontAwesomeIcon icon={faBars} /> {Room}\n        </button>\n        :\n        <button className=\"text-xl md:text-2xl\"></button>\n      :\n      <React.Fragment>\n        <button className=\"text-xl md:text-2xl\"\n          onClick={() => setNavState(!navState)}\n        >\n        <FontAwesomeIcon icon={faBars} rotation={90} /> {Room}\n        </button>\n        <div className=\"flex flex-col items-center w-40 p-2 top-0 left-0 mt-16 h-auto absolute pt-1 z-10 border-4 border-custom-biege bg-custom-biege text-xl rounded-br-lg box-border\"\n          ref={ref}\n        >\n          {\n            rooms.map((room, i) => (\n              <button className=\"py-2 w-full hover:bg-custom-aqua hover:shadow\"\n                key={i}\n                onClick={() => joinRoom(room)}\n              >\n                {room}\n              </button>\n            ))\n          }\n          <div className=\"\">\n            <form className=\"flex flex-col items-center mt-2 space-y-2\"\n              onSubmit={createRoom}\n            >\n              <input className=\"w-full px-2 text-lg text-black rounded-lg\"\n                name=\"createRoom\"\n                type=\"text\"\n                placeholder=\"Create a Room\"\n                maxLength={15}\n                required\n                onChange={e => setNewRoom(e.target.value)}\n                value={newRoom}\n              />\n              <button className=\"py-2 w-full hover:bg-custom-aqua hover:shadow\"\n                type=\"submit\"\n              >\n                Create Room\n              </button>\n            </form>\n          </div>\n        </div>\n      </React.Fragment>\n    }\n      <p className=\"text-center\">Chatticus</p>\n      <button className=\"text-xl md:text-2xl\"\n        onClick={disconnect}\n      >\n        Exit <FontAwesomeIcon icon={faDoorOpen} />\n      </button>\n    </nav>\n  );\n};\n\nexport default Navbar;","import React from 'react';\n\nconst Username = props => {\n\n  // setting up props from Home.js\n  const handleChange = props.handleChange;\n  const username = props.username;\n  const submit = props.submit;\n\n  return (\n    <React.Fragment>\n      <h1 className=\"mt-16 text-center text-custom-white text-2xl md:text-4xl font-extrabold\">Welcome to Chatticus!</h1>\n      <form className=\"flex flex-col items-center space-y-8\"\n        onSubmit={submit}\n      >\n        <label className=\"p-2 text-xl md:text-2xl text-custom-white font-medium\"\n          htmlFor=\"username\"\n        >\n          Please create a username for this session\n        </label>\n        <input className=\"p-2 text-lg md:text-xl rounded-lg focus:outline-none focus:shadow-outline\"\n          name=\"username\"\n          type=\"text\"\n          required\n          onChange={handleChange}\n          value={username}\n        />\n        <button className=\"bg-custom-gold p-2 text-custom-blue text-xl md:text-2xl font-medium rounded-lg focus:outline-none focus:shadow-outline\"\n          type=\"submit\"\n        >Let's Go!</button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default Username;","import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport UseForm from '../utils/useForm';\nimport Navbar from './Navbar';\nimport Username from './Username';\n\n// Creating socket for user session\n// const socket = io.connect(window.location.hostname || 'http://localhost:3001')\nconst socket = io()\n\nconst Home = () => {\n\n  // State for user submission form\n  const [usernameState, setUsernameState] = useState(true)\n  // State to show chat\n  const [chatState, setChatState] = useState(false);\n  // State to hold messages\n  const [messages, setMessages] = useState([]);\n\n  // setting form values, importing generic input handler\n  const { values, setValues, handleChange } = UseForm(\n    {\n      username: \"\",\n      message: \"\"\n    }\n  );\n\n  // Submits username and sets states tos how chat\n  const usernameSubmit = e => {\n    e.preventDefault();\n    socket.emit('addUser', values.username);\n    setUsernameState(false);\n    setChatState(true);\n  }\n\n  // Submits messages from user\n  const messageSubmit = e => {\n    e.preventDefault();\n    socket.emit('sendChat',\n      {\n        username: values.username,\n        message: values.message\n      }\n    );\n    setValues({ message: \"\" })\n  }\n\n  // reference for auto bottom scroll\n  const messagesEndRef = useRef(null);\n\n  // Scrolls to bottom message when messages exceeds container size\n  const scrollToBottom = () => {\n    if (messages[0])\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n  }\n\n  useEffect(() => {\n    // updates chat from all users\n    socket.on('updateChat', data => {\n      setMessages(messages => messages.concat(data))\n    });\n    // sets messages for newly joined room\n    socket.on('changeRoom', setMessages([]));\n  }, []);\n\n  // scrolls to bottom of chat once messages exceed container size\n  useEffect(scrollToBottom, [messages])\n\n  return (\n    <div className=\"relative bg-custom-green min-h-screen overflow-hidden\"\n    >\n    <Navbar \n      socket={socket} \n      chatState={chatState}\n    />\n    {usernameState === true ?\n      <div>\n        <Username\n          handleChange={handleChange}\n          username={values.username}\n          submit={usernameSubmit}\n        />\n      </div>\n      :\n        null\n      }\n      {chatState === false ?\n        null\n      :\n        <React.Fragment>\n          <div className=\"h-screen-1/2 md:h-screen-3/4 mt-2 md:mx-40 flex-shrink-0 md:p-4 md:rounded-lg p-2 space-y-2 bg-custom-white overflow-y-scroll shadow-inner\">\n            {\n              messages.map(({username, message, color}, i) => (\n                <div className=\"text-xl\"\n                  key={i}\n                >\n                  <p><span className={`underline text-${color} font-medium`} >{username}</span><span> : {message}</span></p>\n                </div>\n              ))\n            }\n            <div ref={messagesEndRef} />\n          </div>\n          <form className=\"flex m-2 md:justify-center md:mx-40\"\n            onSubmit={messageSubmit}\n          >\n            <input className=\"p-2 flex-grow text-xl rounded-l-lg focus:outline-none focus:shadow-outline\"\n              name=\"message\"\n              type=\"text\"\n              placeholder=\"Start typing...\"\n              required\n              onChange={handleChange}\n              value={values.message}\n            />\n            <button className=\"p-2 px-6 bg-custom-gold text-xl text-custom-blue rounded-r-lg focus:outline-none focus:shadow-outline\"\n              type=\"submit\"\n            >\n              Send\n            </button>\n          </form>\n          \n        </React.Fragment>\n      }\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from './components/Home';\n\nconst App = () => {\n  return (\n    <Home />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}